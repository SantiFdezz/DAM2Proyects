openapi: "3.0.0"
info:
  version: 1.0.0
  title: AirPeekAPI
  description: Esta api sirve para controlar tanto los usuarios de Airpeek como los vuelos.
servers:
  - url: http://localhost:8000
tags:
  - name: User
    description: User actions 
  - name: Flights
    description: Flights info
paths:
  /user/login:
    post:
      tags:
        - User
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: email
          in: query
          required: true
          description: The email of the user
          schema:
            type: string 
        - name: password
          in: query
          required: true
          description: The password of the user
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/ClientError'
        401:
          $ref: '#/components/responses/Unauthorized'
  /user/register:
    post:
      tags:
        - User
      summary: Register a new user
      parameters:
        - name: name
          in: query
          required: true
          description: The full name of the user
          schema:
            type: string
        - name: email
          in: query
          required: true
          description: The email of the user
          schema:
            type: string
          example: "matusalen@fpcoruna.afundacion.org"
        - name: country
          in: query
          required: true
          description: The user's home country
          schema:
            type: string
          example: "España"
        - name: password
          in: query
          required: true
          description: The user's password
          schema:
            type: string
        - name: birthdate
          in: query
          required: true
          description: The user's birthdate
          schema:
            type: string
          example: "24/03/2001"
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/ClientError'
        409:
          $ref: '#/components/responses/Conflict'
  /user:
    get:
      tags:
        - User
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile received.
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - User
      summary: Update user profile
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          required: true
          description: The full name of the user
          schema:
            type: string
        - name: email
          in: query
          required: true
          description: The email of the user
          schema:
            type: string
          example: "matusalen@fpcoruna.afundacion.org"
        - name: country
          in: query
          required: true
          description: The user's home country
          schema:
            type: string
          example: "España"
        - name: password
          in: query
          required: true
          description: The user's password
          schema:
            type: string
        - name: birthdate
          in: query
          required: true
          description: The user's birthdate
          schema:
            type: string
          example: "24/03/2001"
        - name: image
          in: query
          required: false
          description: The user's profile image
          schema:
            type: string
            format: binary 
      responses:
        200:
          $ref: '#/components/responses/Ok'
        400:
          $ref: '#/components/responses/ClientError'
        401:
          $ref: '#/components/responses/Unauthorized'
        409:
          $ref: '#/components/responses/Conflict'
    delete:
      tags:
        - User
      summary: Delete user account
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/Ok'
        500:
          $ref: '#/components/responses/ServerError'
        401:
          $ref: '#/components/responses/Unauthorized'
  /user/flights:
    get:
      tags:
        - User
      summary: Get all flights added to user
      description: Returns a list of all flights
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of flights
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flights'
        404:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - User
      summary: Add a flight ticket to user flights
      description: Post a flight ticket to user flights
      security:
        - bearerAuth: []
      parameters:
          - name: id
            in: query
            required: true
            description: Flight code
            schema:
              type: string
              example: "BY2940"
      responses:
        200:
          $ref: '#/components/responses/Ok'
        500:
          $ref: '#/components/responses/ServerError'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags:
        - User
      summary: Delete a flight
      description: Delete a flight from user flights
      security:
        - bearerAuth: []
      responses:
        200:
          $ref: '#/components/responses/Ok'
        500:
          $ref: '#/components/responses/ServerError'
        401:
          $ref: '#/components/responses/Unauthorized'
  /search:
    get:
      tags:
        - Flights
      summary: Returns searched flights
      parameters:
        - name: origin
          in: query
          required: true
          description: Where the flight should depart from
          schema:
            type: string
            example: "LPA"
        - name: destination
          in: query
          required: true
          description: Where the flight should arrive at
          schema:
            type: string
          example: "AOK"
        - name: d_date
          in: query
          required: true
          description: The departure date
          schema:
            type: string
            example: "24/03/2001"
        - name: r_date
          in: query
          required: false
          description: The return date
          schema:
            type: string
          example: "27/03/2001"
        - name: adults
          in: query
          required: true
          description: The number of adults
          schema:
            type: integer
        # the following two may or may not actually do anything more than increasing the number of adults
        - name: children
          in: query
          required: true
          description: The number of children
          schema:
            type: integer
        - name: toddlers
          in: query
          required: true
          description: The number of toddlers
          schema:
            type: integer
        - name: bidirectional
          in: query
          required: true
          description: Whether a return flight should also be looked in tandem
          schema:
            type: boolean
          example: True
      responses:
          200:
            description: Successful retrieval of flights
            content:
              application/json:    
                schema:
                  $ref: '#/components/schemas/SearchFlights'
          400:
            $ref: '#/components/responses/ClientError'
          404:
            $ref: '#/components/responses/BadRequest'
          500:
            $ref: '#/components/responses/ServerError'
  /special_offers:
    get:
      tags:
        - Flights
      summary: Get special offers which can interest the user
      description: Returns a list of some special flight offers that stand out for being affordable
      responses:
        200:
          description: A list of special offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flights'
        404:
          $ref: '#/components/responses/BadRequest'


components:
  responses:
    ClientError:
      description: Something went wrong (Client Error)
      content:
        application/json:    
          schema:
            example:
              response: not_ok
    ServerError:
      description: Something went wrong (Server Error)
      content:
        application/json:    
          schema:
            example:
              response: not_ok
    BadRequest:
      description: Offer not found.
      content:
        application/json:    
          schema:
            example:
              response: not_ok
    Unauthorized:
      description: Unauthorized
      content:
        application/json:    
          schema:
            example:
              response: Unauthorized
    Conflict:
      description: Conflict on the server.
      content:
        application/json:
          schema:
            example:
              response: already_exist
    Ok:
      description: Ok
      content:
        application/json:
          schema:
            example:
              response: ok
  schemas:
    User:
      type: object
      properties:
        image:
          type: string
          format: binary
        name:
          type: string
        email:
          type: string
        country:
          type: string
        birthdate:
          type: string
    Flight:
      type: object
      properties:
        departure_time: 
          type: string
        arrival_time: 
          type: string
        date: 
          type: string
        departure_location: 
          type: string
        arrival_location: 
          type: string
        price: 
          type: integer
    Flights:
      type: array
      items:
        $ref: '#/components/schemas/Flight'
    SearchFlight:
        type: object
        properties:
          origin:
            type: string
          destination:
            type: string
          d_date:
            type: string
          r_date:
            type: string
          adults:
            type: integer
          children:
            type: integer
          toddlers:
            type: integer
          bidirectional:
            type: boolean
    SearchFlights:
      type: array
      items:
        $ref: '#/components/schemas/SearchFlight'


